name: Vultr Snapshot Management

on:
  schedule:
    # 每6小时运行一次 (0点, 6点, 12点, 18点 UTC)
    - cron: '0 */6 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  manage_vultr_snapshots:
    runs-on: ubuntu-latest
    env:
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }} # 从GitHub Secrets获取API密钥
      VULTR_API_URL: "https://api.vultr.com/v2"
      HTTP_OK: 200
      HTTP_ACCEPTED: 202 # 通常用于创建操作
      HTTP_NO_CONTENT: 204 # 通常用于删除操作

    steps:
      - name: Checkout code (optional, if script is in repo)
        uses: actions/checkout@v4 # 虽然此脚本是内联的，但保留此步骤是个好习惯

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Vultr Snapshot Management Script
        id: vultr_script
        run: |
          #!/bin/bash
          set -eo pipefail # Exit on error, treat unset variables as an error, and propagate pipe failures

          # --- 配置 ---
          SNAPSHOT_POLL_INTERVAL=30 # 秒，检查快照状态的轮询间隔
          SNAPSHOT_CREATION_TIMEOUT=1800 # 秒，创建快照的总超时时间 (30分钟)
          API_REQUEST_DELAY=2 # 秒，API请求之间的延迟，以避免速率限制

          # --- 日志和报告变量 ---
          deleted_snapshots_count=0
          active_instances_count=0
          snapshots_to_create_count=0
          snapshots_created_successfully_count=0
          snapshots_failed_count=0
          summary_report=""

          # --- 辅助函数 ---
          log_info() {
            echo "INFO: $(date +'%Y-%m-%d %H:%M:%S') - $1"
          }

          log_error() {
            echo "ERROR: $(date +'%Y-%m-%d %H:%M:%S') - $1" >&2
            summary_report+="ERROR: $1\n"
          }

          # Vultr API 调用函数
          # 参数1: HTTP Method (GET, POST, DELETE)
          # 参数2: API Endpoint (e.g., /snapshots)
          # 参数3: POST data (optional, for POST requests)
          # 输出: API 响应体
          vultr_api_call() {
            local method="$1"
            local endpoint="$2"
            local data="$3"
            local response
            local http_code
            local body

            log_info "Calling Vultr API: $method $VULTR_API_URL$endpoint"
            if [[ -n "$data" ]]; then
              log_info "With data: $data"
            fi

            # 执行 curl 并捕获响应体和HTTP状态码
            # -s: silent, -w: write-out, -H: header
            response=$(curl -s -w "\n%{http_code}" \
              -X "$method" \
              -H "Authorization: Bearer $VULTR_API_KEY" \
              -H "Content-Type: application/json" \
              ${data:+-d "$data"} \
              "$VULTR_API_URL$endpoint")

            http_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | sed '$d') # 移除最后一行 (http_code)

            # 检查HTTP状态码
            # 对于GET，期望200
            # 对于POST创建快照，期望202
            # 对于DELETE，期望204
            local expected_code
            if [[ "$method" == "GET" ]]; then
              expected_code=$HTTP_OK
            elif [[ "$method" == "POST" && "$endpoint" == "/snapshots" ]]; then
              expected_code=$HTTP_ACCEPTED
            elif [[ "$method" == "DELETE" ]]; then
              expected_code=$HTTP_NO_CONTENT
            else
              expected_code=$HTTP_OK # 默认
            fi

            if [[ "$http_code" -ne "$expected_code" ]]; then
              log_error "API call to $endpoint failed with HTTP status $http_code. Response: $body"
              # 如果是创建快照的特定错误，可能会有不同的处理
              if [[ "$method" == "POST" && "$endpoint" == "/snapshots" ]]; then
                 echo "::set-output name=creation_error::true" # 特殊标记创建失败
              fi
              return 1 # 返回错误
            fi

            log_info "API call successful (HTTP $http_code)."
            echo "$body" # 返回响应体
            return 0 # 返回成功
          }


          # --- 步骤 1: 获取并删除所有现有快照 ---
          log_info "--- Step 1: Deleting existing snapshots ---"
          snapshots_response=$(vultr_api_call "GET" "/snapshots") || { log_error "Failed to get snapshots list."; exit 1; }

          snapshot_ids=$(echo "$snapshots_response" | jq -r '.snapshots[]?.id') # ?. 避免在没有快照时出错

          if [[ -z "$snapshot_ids" ]]; then
            log_info "No existing snapshots found to delete."
            summary_report+="Snapshots deleted: 0\n"
          else
            log_info "Found snapshots to delete:"
            echo "$snapshots_response" | jq -r '.snapshots[] | "ID: \(.id), Description: \(.description), Status: \(.status)"'

            index=0
            total_to_delete=$(echo "$snapshot_ids" | wc -l)
            for id in $snapshot_ids; do
              index=$((index + 1))
              log_info "Deleting snapshot $id ($index/$total_to_delete)..."
              vultr_api_call "DELETE" "/snapshots/$id" || log_error "Failed to delete snapshot $id. Continuing with next steps."
              # 如果上一个命令失败，它会记录错误但不会退出脚本
              deleted_snapshots_count=$((deleted_snapshots_count + 1))
              sleep $API_REQUEST_DELAY # 避免API速率限制
            done
            log_info "Finished deleting $deleted_snapshots_count snapshots."
            summary_report+="Snapshots deleted: $deleted_snapshots_count\n"
          fi
          echo "" #空行


          # --- 步骤 2: 获取所有Vultr实例信息 ---
          log_info "--- Step 2: Fetching Vultr instances information ---"
          instances_response=$(vultr_api_call "GET" "/instances") || { log_error "Failed to get instances list."; exit 1; }

          active_instances=$(echo "$instances_response" | jq -c '.instances[] | select(.status == "active")')

          if [[ -z "$active_instances" ]]; then
            log_info "No active instances found."
            summary_report+="Active instances found: 0\n"
            log_info "--- Operation Summary ---"
            echo -e "$summary_report"
            exit 0 # 没有活动实例，正常结束
          fi

          log_info "Active instances found:"
          echo "$active_instances" | jq -r '"ID: \(.id), Label: \(.label), Status: \(.status), Power: \(.power_status), Plan: \(.plan), Region: \(.region)"'
          active_instances_count=$(echo "$active_instances" | jq -s 'length')
          summary_report+="Active instances found: $active_instances_count\n"
          snapshots_to_create_count=$active_instances_count
          summary_report+="Snapshots to create: $snapshots_to_create_count\n"
          echo "" #空行


          # --- 步骤 3: 为每个活动实例创建新快照 ---
          log_info "--- Step 3: Creating new snapshots for active instances ---"
          snapshot_tasks=() # 存储创建的快照ID及其对应的实例ID，用于后续监控

          instance_ids_to_snapshot=$(echo "$active_instances" | jq -r '.id')

          for instance_id in $instance_ids_to_snapshot; do
            instance_label=$(echo "$active_instances" | jq -r --arg INSTANCE_ID "$instance_id" '. | select(.id == $INSTANCE_ID) | .label')
            timestamp=$(date +'%Y%m%d_%H%M%S')
            description="AutoBackup_${instance_label}_${timestamp}"
            log_info "Creating snapshot for instance ID: $instance_id (Label: $instance_label) with description: $description"

            post_data=$(jq -n --arg inst_id "$instance_id" --arg desc "$description" \
              '{instance_id: $inst_id, description: $desc}')

            create_response=$(vultr_api_call "POST" "/snapshots" "$post_data")
            
            if [[ $? -ne 0 || $(echo "::get-output name=creation_error::") == "true" ]]; then
              log_error "Failed to initiate snapshot creation for instance $instance_id."
              snapshots_failed_count=$((snapshots_failed_count + 1))
              # 重置错误标记，以免影响后续调用
              echo "::set-output name=creation_error::false" 
            else
              new_snapshot_id=$(echo "$create_response" | jq -r '.snapshot.id')
              log_info "Snapshot creation initiated for instance $instance_id. New snapshot ID: $new_snapshot_id"
              snapshot_tasks+=("$new_snapshot_id:$instance_id") # 格式: snapshot_id:instance_id
            fi
            sleep $API_REQUEST_DELAY # 避免API速率限制
          done
          echo "" #空行


          # --- 步骤 4: 等待并检查快照创建状态 ---
          log_info "--- Step 4: Monitoring snapshot creation status ---"
          if [[ ${#snapshot_tasks[@]} -eq 0 && $snapshots_failed_count -gt 0 ]]; then
            log_info "No snapshots were successfully initiated for monitoring."
          elif [[ ${#snapshot_tasks[@]} -eq 0 ]]; then
            log_info "No snapshots were initiated (perhaps no active instances or all creations failed early)."
          fi

          for task in "${snapshot_tasks[@]}"; do
            snapshot_id="${task%%:*}" # 提取快照ID
            instance_id_monitored="${task#*:}" # 提取实例ID
            instance_label_monitored=$(echo "$active_instances" | jq -r --arg INSTANCE_ID "$instance_id_monitored" '. | select(.id == $INSTANCE_ID) | .label')

            log_info "Monitoring snapshot ID: $snapshot_id for instance: $instance_id_monitored (Label: $instance_label_monitored)"
            start_time=$(date +%s)
            completed=false

            while true; do
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))

              if [[ $elapsed_time -ge $SNAPSHOT_CREATION_TIMEOUT ]]; then
                log_error "Timeout waiting for snapshot $snapshot_id (Instance: $instance_id_monitored) to complete after $SNAPSHOT_CREATION_TIMEOUT seconds."
                snapshots_failed_count=$((snapshots_failed_count + 1))
                break # 跳出此快照的监控循环
              fi

              status_response=$(vultr_api_call "GET" "/snapshots/$snapshot_id") || {
                log_error "Failed to get status for snapshot $snapshot_id. Will retry."
                sleep $SNAPSHOT_POLL_INTERVAL
                continue
              }

              snapshot_status=$(echo "$status_response" | jq -r '.snapshot.status')
              log_info "Snapshot $snapshot_id (Instance: $instance_id_monitored) status: $snapshot_status (Elapsed: ${elapsed_time}s)"

              if [[ "$snapshot_status" == "complete" ]]; then
                log_info "Snapshot $snapshot_id (Instance: $instance_id_monitored) completed successfully!"
                snapshots_created_successfully_count=$((snapshots_created_successfully_count + 1))
                completed=true
                break # 快照完成，跳出此快照的监控循环
              elif [[ "$snapshot_status" == "pending" ]]; then
                # 继续等待
                sleep $SNAPSHOT_POLL_INTERVAL
              else
                log_error "Snapshot $snapshot_id (Instance: $instance_id_monitored) entered an unexpected state: $snapshot_status. Details: $(echo "$status_response" | jq .)"
                snapshots_failed_count=$((snapshots_failed_count + 1))
                break # 异常状态，跳出
              fi
            done
            # 在监控单个快照后，可以稍微暂停，尤其是在有多个快照并行创建时
            [[ ${#snapshot_tasks[@]} -gt 1 ]] && sleep $API_REQUEST_DELAY 
          done
          echo "" #空行

          # --- 操作总结报告 ---
          log_info "--- Operation Summary ---"
          summary_report+="Snapshots successfully created: $snapshots_created_successfully_count\n"
          summary_report+="Snapshots failed or timed out: $snapshots_failed_count\n"
          echo -e "$summary_report"

          # 如果有失败，则让工作流失败
          if [[ "$snapshots_failed_count" -gt 0 || $((snapshots_to_create_count - snapshots_created_successfully_count )) -gt 0 && $snapshots_to_create_count -gt 0 ]]; then
            if [[ $snapshots_to_create_count -gt 0 && $snapshots_created_successfully_count -eq 0 && $snapshots_failed_count -eq 0 ]]; then
               # 这是所有创建都初始失败的情况
               log_error "All snapshot creation attempts failed to initiate."
            elif [[ $snapshots_failed_count -gt 0 ]]; then
               log_error "Some snapshots failed during creation or timed out."
            fi
            # 如果期望创建的快照数量大于成功创建的数量，也认为是有问题
            if [[ $snapshots_to_create_count -gt $snapshots_created_successfully_count ]]; then
                log_error "Not all designated snapshots were successfully created (Expected: $snapshots_to_create_count, Succeeded: $snapshots_created_successfully_count)."
                exit 1
            fi
          fi

          log_info "Vultr snapshot management process completed."

      - name: Print Summary from Script Output (if needed for GitHub Summary)
        if: always() # 总是运行，即使脚本失败
        run: |
          echo "## Vultr Snapshot Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run at:** $(date -u +'%Y-%m-%d %H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Details:" >> $GITHUB_STEP_SUMMARY
          # 尝试从脚本的输出中提取总结。这个比较复杂，更简单的方式是让脚本自己写入$GITHUB_STEP_SUMMARY
          # 为了简单起见，这里只显示一个通用消息，详细信息在日志中。
          # 或者，让前面的脚本直接写入 GITHUB_STEP_SUMMARY 文件
          echo "Snapshots Deleted: $(grep 'Snapshots deleted:' <<< "$(cat /tmp/vultr_script_output.txt)" | awk '{print $NF}')" >> $GITHUB_STEP_SUMMARY || echo "Snapshots Deleted: N/A" >> $GITHUB_STEP_SUMMARY
          echo "Active Instances Found: $(grep 'Active instances found:' <<< "$(cat /tmp/vultr_script_output.txt)" | awk '{print $NF}')" >> $GITHUB_STEP_SUMMARY || echo "Active Instances Found: N/A" >> $GITHUB_STEP_SUMMARY
          echo "Snapshots to Create: $(grep 'Snapshots to create:' <<< "$(cat /tmp/vultr_script_output.txt)" | awk '{print $NF}')" >> $GITHUB_STEP_SUMMARY || echo "Snapshots to Create: N/A" >> $GITHUB_STEP_SUMMARY
          echo "Snapshots Successfully Created: $(grep 'Snapshots successfully created:' <<< "$(cat /tmp/vultr_script_output.txt)" | awk '{print $NF}')" >> $GITHUB_STEP_SUMMARY || echo "Snapshots Successfully Created: N/A" >> $GITHUB_STEP_SUMMARY
          echo "Snapshots Failed/Timed Out: $(grep 'Snapshots failed or timed out:' <<< "$(cat /tmp/vultr_script_output.txt)" | awk '{print $NF}')" >> $GITHUB_STEP_SUMMARY || echo "Snapshots Failed/Timed Out: N/A" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the 'Vultr Snapshot Management Script' step logs for full details." >> $GITHUB_STEP_SUMMARY
          rm -f /tmp/vultr_script_output.txt

    outputs:
      deleted_snapshots: ${{ steps.vultr_script.outputs.deleted_count || 0 }}
      created_snapshots: ${{ steps.vultr_script.outputs.succeeded_count || 0 }}
      failed_snapshots: ${{ steps.vultr_script.outputs.failed_count || 0 }}

