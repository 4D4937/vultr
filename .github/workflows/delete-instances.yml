name: Vultr Snapshot Management

on:
  # ÊØè6Â∞èÊó∂Ëá™Âä®ËøêË°å‰∏ÄÊ¨° (00:00, 06:00, 12:00, 18:00)
  schedule:
    - cron: '0 */6 * * *'
  
  # ÊîØÊåÅÊâãÂä®Ëß¶Âèë
  workflow_dispatch:

env:
  VULTR_API_URL: "https://api.vultr.com/v2"
  MAX_RETRIES: 30
  RETRY_INTERVAL: 30

jobs:
  vultr-snapshot-management:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate API key
      run: |
        if [ -z "${{ secrets.VULTR_API_KEY }}" ]; then
          echo "‚ùå VULTR_API_KEY secret is not set"
          exit 1
        fi
        echo "‚úÖ API key validation passed"

    - name: Step 1 - Delete existing snapshots
      run: |
        echo "üóëÔ∏è Starting cleanup of existing snapshots..."
        
        # Ëé∑ÂèñÊâÄÊúâÁé∞ÊúâÂø´ÁÖß
        snapshots=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
          -H "Content-Type: application/json" \
          "$VULTR_API_URL/snapshots")
        
        # Ê£ÄÊü•APIÂìçÂ∫î
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed to fetch snapshots"
          exit 1
        fi
        
        snapshot_count=$(echo "$snapshots" | jq -r '.snapshots | length')
        
        if [ "$snapshot_count" -eq 0 ]; then
          echo "‚ÑπÔ∏è No existing snapshots found"
        else
          echo "üìã Found $snapshot_count existing snapshots"
          
          # ÊòæÁ§∫Áé∞ÊúâÂø´ÁÖß‰ø°ÊÅØ
          echo "Existing snapshots:"
          echo "$snapshots" | jq -r '.snapshots[] | "- ID: \(.id) | Description: \(.description) | Status: \(.status) | Size: \(.size_bytes // 0 | tonumber / 1024 / 1024 / 1024 | floor)GB | Created: \(.date_created)"'
          
          # Âà†Èô§ÊâÄÊúâÁé∞ÊúâÂø´ÁÖß
          deleted_count=0
          failed_count=0
          
          echo "$snapshots" | jq -r '.snapshots[].id' | while read snapshot_id; do
            echo "üóëÔ∏è Deleting snapshot: $snapshot_id"
            
            response=$(curl -s -w "%{http_code}" -X DELETE \
              -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
              "$VULTR_API_URL/snapshots/$snapshot_id")
            
            http_code="${response: -3}"
            
            if [ "$http_code" = "204" ] || [ "$http_code" = "404" ]; then
              echo "‚úÖ Successfully deleted snapshot: $snapshot_id"
            else
              echo "‚ùå Failed to delete snapshot $snapshot_id (HTTP: $http_code)"
            fi
            
            sleep 2  # ÈÅøÂÖçAPIÈôêÂà∂
          done
        fi
        
        echo "‚úÖ Snapshot cleanup completed"

    - name: Step 2 - Get Vultr instances
      id: get_instances
      run: |
        echo "üîç Fetching Vultr instances..."
        
        instances=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
          -H "Content-Type: application/json" \
          "$VULTR_API_URL/instances")
        
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed to fetch instances"
          exit 1
        fi
        
        instance_count=$(echo "$instances" | jq -r '.instances | length')
        
        if [ "$instance_count" -eq 0 ]; then
          echo "‚ÑπÔ∏è No instances found"
          echo "instance_count=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "üìã Found $instance_count instances"
        echo "instance_count=$instance_count" >> $GITHUB_OUTPUT
        
        # ‰øùÂ≠òÂÆû‰æã‰ø°ÊÅØÂà∞Êñá‰ª∂
        echo "$instances" > instances.json
        
        # ÊòæÁ§∫ÂÆû‰æãËØ¶ÊÉÖ
        echo "Instance details:"
        echo "$instances" | jq -r '.instances[] | "- ID: \(.id) | Label: \(.label) | Status: \(.status) | Power: \(.power_status) | Plan: \(.plan) | Region: \(.region) | OS: \(.os) | RAM: \(.ram)MB | Disk: \(.disk)GB | IP: \(.main_ip)"'
        
        # ËøáÊª§Ê¥ªË∑ÉÂÆû‰æã
        active_instances=$(echo "$instances" | jq '[.instances[] | select(.status == "active" and .power_status == "running")]')
        active_count=$(echo "$active_instances" | jq 'length')
        
        echo "active_count=$active_count" >> $GITHUB_OUTPUT
        echo "$active_instances" > active_instances.json
        
        echo "‚úÖ Found $active_count active instances for backup"

    - name: Step 3 - Create new snapshots
      if: steps.get_instances.outputs.active_count > 0
      id: create_snapshots
      run: |
        echo "üì∏ Creating new snapshots..."
        
        timestamp=$(date '+%Y-%m-%d_%H-%M-%S')
        active_instances=$(cat active_instances.json)
        
        # ÂàõÂª∫Êï∞ÁªÑÂ≠òÂÇ®Âø´ÁÖß‰ø°ÊÅØ
        snapshot_jobs="[]"
        created_count=0
        failed_count=0
        
        echo "$active_instances" | jq -c '.[]' | while read instance; do
          instance_id=$(echo "$instance" | jq -r '.id')
          instance_label=$(echo "$instance" | jq -r '.label')
          
          # ÂàõÂª∫Âø´ÁÖßÊèèËø∞
          snapshot_description="Auto-backup-${instance_label}-${timestamp}"
          
          echo "üì∏ Creating snapshot for instance: $instance_id ($instance_label)"
          
          # ÂàõÂª∫Âø´ÁÖßËØ∑Ê±Ç
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{\"description\": \"$snapshot_description\"}" \
            "$VULTR_API_URL/instances/$instance_id/snapshots")
          
          # ÂàÜÁ¶ªÂìçÂ∫î‰ΩìÂíåÁä∂ÊÄÅÁ†Å
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          if [ "$http_code" = "202" ]; then
            snapshot_id=$(echo "$response_body" | jq -r '.snapshot.id')
            echo "‚úÖ Snapshot creation initiated: $snapshot_id"
            
            # ‰øùÂ≠òÂø´ÁÖß‰ø°ÊÅØ
            snapshot_info="{\"snapshot_id\":\"$snapshot_id\",\"instance_id\":\"$instance_id\",\"instance_label\":\"$instance_label\",\"description\":\"$snapshot_description\"}"
            snapshot_jobs=$(echo "$snapshot_jobs" | jq ". += [$snapshot_info]")
          else
            echo "‚ùå Failed to create snapshot for instance $instance_id (HTTP: $http_code)"
            echo "Response: $response_body"
          fi
          
          sleep 3  # ÈÅøÂÖçAPIÈôêÂà∂
        done
        
        # ‰øùÂ≠òÂø´ÁÖß‰ªªÂä°‰ø°ÊÅØ
        echo "$snapshot_jobs" > snapshot_jobs.json
        job_count=$(echo "$snapshot_jobs" | jq 'length')
        echo "snapshot_jobs_count=$job_count" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Initiated $job_count snapshot creation jobs"

    - name: Step 4 - Monitor snapshot creation status
      if: steps.create_snapshots.outputs.snapshot_jobs_count > 0
      run: |
        echo "‚è≥ Monitoring snapshot creation progress..."
        
        if [ ! -f "snapshot_jobs.json" ]; then
          echo "‚ùå No snapshot jobs file found"
          exit 1
        fi
        
        snapshot_jobs=$(cat snapshot_jobs.json)
        total_jobs=$(echo "$snapshot_jobs" | jq 'length')
        
        if [ "$total_jobs" -eq 0 ]; then
          echo "‚ÑπÔ∏è No snapshot jobs to monitor"
          exit 0
        fi
        
        echo "üìä Monitoring $total_jobs snapshot creation jobs..."
        
        retry_count=0
        completed_count=0
        failed_count=0
        
        while [ $retry_count -lt $MAX_RETRIES ]; do
          echo "üîÑ Check #$((retry_count + 1))/$MAX_RETRIES"
          
          pending_jobs=0
          current_completed=0
          current_failed=0
          
          echo "$snapshot_jobs" | jq -c '.[]' | while read job; do
            snapshot_id=$(echo "$job" | jq -r '.snapshot_id')
            instance_label=$(echo "$job" | jq -r '.instance_label')
            
            # Ê£ÄÊü•Âø´ÁÖßÁä∂ÊÄÅ
            status_response=$(curl -s -X GET \
              -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
              "$VULTR_API_URL/snapshots/$snapshot_id")
            
            if [ $? -eq 0 ]; then
              status=$(echo "$status_response" | jq -r '.snapshot.status // "unknown"')
              size_bytes=$(echo "$status_response" | jq -r '.snapshot.size_bytes // 0')
              size_gb=$((size_bytes / 1024 / 1024 / 1024))
              
              case "$status" in
                "complete")
                  echo "‚úÖ Snapshot $snapshot_id ($instance_label): Complete (${size_gb}GB)"
                  ;;
                "pending")
                  echo "‚è≥ Snapshot $snapshot_id ($instance_label): In progress..."
                  pending_jobs=$((pending_jobs + 1))
                  ;;
                "unknown"|"")
                  echo "‚ùì Snapshot $snapshot_id ($instance_label): Status unknown"
                  pending_jobs=$((pending_jobs + 1))
                  ;;
                *)
                  echo "‚ùå Snapshot $snapshot_id ($instance_label): Failed (Status: $status)"
                  ;;
              esac
            else
              echo "‚ö†Ô∏è Failed to check status for snapshot $snapshot_id"
              pending_jobs=$((pending_jobs + 1))
            fi
            
            sleep 1  # ÈÅøÂÖçAPIÈôêÂà∂
          done
          
          if [ $pending_jobs -eq 0 ]; then
            echo "üéâ All snapshots completed!"
            break
          fi
          
          retry_count=$((retry_count + 1))
          
          if [ $retry_count -lt $MAX_RETRIES ]; then
            echo "‚è±Ô∏è $pending_jobs snapshots still pending. Waiting ${RETRY_INTERVAL}s before next check..."
            sleep $RETRY_INTERVAL
          fi
        done
        
        if [ $retry_count -eq $MAX_RETRIES ]; then
          echo "‚ö†Ô∏è Monitoring timeout reached. Some snapshots may still be in progress."
        fi

    - name: Generate summary report
      if: always()
      run: |
        echo "üìä === VULTR SNAPSHOT MANAGEMENT SUMMARY ==="
        echo "‚è∞ Execution time: $(date)"
        echo ""
        
        # ÂÆû‰æãÁªüËÆ°
        if [ -f "instances.json" ]; then
          total_instances=$(cat instances.json | jq -r '.instances | length')
          echo "üñ•Ô∏è Total instances: $total_instances"
          
          if [ -f "active_instances.json" ]; then
            active_instances=$(cat active_instances.json | jq 'length')
            echo "‚úÖ Active instances: $active_instances"
          fi
        fi
        
        # Âø´ÁÖßÁªüËÆ°
        if [ -f "snapshot_jobs.json" ]; then
          snapshot_jobs=$(cat snapshot_jobs.json | jq 'length')
          echo "üì∏ Snapshot jobs initiated: $snapshot_jobs"
        fi
        
        echo ""
        echo "üîó Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        
        # Ëé∑ÂèñÊúÄÊñ∞Âø´ÁÖßÁä∂ÊÄÅ
        echo "üìã Final snapshot status:"
        final_snapshots=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
          "$VULTR_API_URL/snapshots")
        
        if [ $? -eq 0 ]; then
          current_snapshot_count=$(echo "$final_snapshots" | jq -r '.snapshots | length')
          echo "üìä Current snapshots: $current_snapshot_count"
          
          if [ "$current_snapshot_count" -gt 0 ]; then
            echo "Recent snapshots:"
            echo "$final_snapshots" | jq -r '.snapshots[] | "- \(.description) | Status: \(.status) | Size: \(.size_bytes // 0 | tonumber / 1024 / 1024 / 1024 | floor)GB"'
          fi
        fi
        
        echo ""
        echo "‚úÖ Snapshot management workflow completed"

    - name: Cleanup temporary files
      if: always()
      run: |
        echo "üßπ Cleaning up temporary files..."
        rm -f instances.json active_instances.json snapshot_jobs.json
        echo "‚úÖ Cleanup completed"
