name: Vultr Snapshot Backup

on:
  schedule:
    # 每6小时运行一次
    - cron: '0 */6 * * *'
  # 支持手动触发
  workflow_dispatch:

jobs:
  snapshot-backup:
    runs-on: ubuntu-latest
    env:
      VULTR_API_URL: https://api.vultr.com/v2
      # 在仓库 Secrets 中设置 VULTR_API_KEY
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
      # 等待超时时间（秒）、轮询间隔（秒）
      TIMEOUT: 3600
      INTERVAL: 60

    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 执行 Vultr 快照备份
        run: |
          echo "🔔 开始 Vultr 快照备份流程"

          # 统计变量
          DEL_COUNT=0
          INST_COUNT=0
          CREATED_COUNT=0
          FAILED_COUNT=0

          #############################################################################
          # 第一步：获取并删除所有现有快照
          #############################################################################
          echo "::group::1. 删除所有现有快照"
          RESPONSE=$(curl -s -H "Authorization: Bearer $VULTR_API_KEY" \
                         "$VULTR_API_URL/snapshots" -w "\n%{http_code}")
          BODY=$(echo "$RESPONSE" | sed '$d')
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "::error::获取快照列表失败，HTTP 状态码：$HTTP_CODE"
            exit 1
          fi

          SNAP_IDS=$(echo "$BODY" | jq -r '.snapshots[]?.id')
          for SID in $SNAP_IDS; do
            echo "  - 删除快照 $SID …"
            RES=$(curl -s -X DELETE -H "Authorization: Bearer $VULTR_API_KEY" \
                        "$VULTR_API_URL/snapshots/$SID" -w "\n%{http_code}")
            CODE=$(echo "$RES" | tail -n1)
            if [[ $CODE -ge 200 && $CODE -lt 300 ]]; then
              echo "    ✔ 删除成功"
              DEL_COUNT=$((DEL_COUNT+1))
            else
              echo "    ⚠ 删除失败，HTTP $CODE"
            fi
            sleep 1
          done
          echo "已删除快照数量：$DEL_COUNT"
          echo "::endgroup::"

          #############################################################################
          # 第二步：获取所有实例信息并展示
          #############################################################################
          echo "::group::2. 列出所有实例"
          RESP2=$(curl -s -H "Authorization: Bearer $VULTR_API_KEY" \
                          "$VULTR_API_URL/instances" -w "\n%{http_code}")
          BODY2=$(echo "$RESP2" | sed '$d')
          CODE2=$(echo "$RESP2" | tail -n1)
          if [[ "$CODE2" != "200" ]]; then
            echo "::error::获取实例列表失败，HTTP 状态码：$CODE2"
            exit 1
          fi

          # 获取实例 ID 列表
          IDS=$(echo "$BODY2" | jq -r '.instances[]?.id')
          INST_COUNT=$(echo "$IDS" | wc -l)
          echo "发现实例数量：$INST_COUNT"
          echo "$BODY2" | jq -r '.instances[] | "  • ID:$$.id)  状态:$$.status)  电源状态:$$.power_status)  方案:$$.plan)  区域:$$.region)"'
          echo "::endgroup::"

          #############################################################################
          # 第三步：为每个实例创建新快照
          #############################################################################
          echo "::group::3. 创建新快照"
          declare -A SNAP_MAP
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          for IID in $IDS; do
            DESC="backup-${IID}-${TIMESTAMP}"
            echo "  - 实例 $IID 创建快照（描述：$DESC）"
            R=$(curl -s -X POST -H "Authorization: Bearer $VULTR_API_KEY" \
                       -H "Content-Type: application/json" \
                       -d "{\"description\":\"$DESC\"}" \
                       "$VULTR_API_URL/instances/$IID/snapshots" \
                       -w "\n%{http_code}")
            B=$(echo "$R" | sed '$d')
            C=$(echo "$R" | tail -n1)
            if [[ "$C" == "200" || "$C" == "202" ]]; then
              SID=$(echo "$B" | jq -r '.snapshot.id')
              echo "    ✔ 请求已接受，快照 ID：$SID"
              SNAP_MAP["$SID"]=$IID
              CREATED_COUNT=$((CREATED_COUNT+1))
            else
              echo "    ⚠ 创建失败，HTTP $C，响应：$B"
              FAILED_COUNT=$((FAILED_COUNT+1))
            fi
            sleep 1
          done
          echo "快照创建请求已发起：成功 $CREATED_COUNT，失败 $FAILED_COUNT"
          echo "::endgroup::"

          #############################################################################
          # 第四步：监控快照状态直到完成或超时
          #############################################################################
          echo "::group::4. 监控快照创建状态"
          for SID in "${!SNAP_MAP[@]}"; do
            ELAPSED=0
            echo "  - 等待快照 $SID 完成…"
            while true; do
              Q=$(curl -s -H "Authorization: Bearer $VULTR_API_KEY" \
                       "$VULTR_API_URL/snapshots/$SID" -w "\n%{http_code}")
              BL=$(echo "$Q" | sed '$d')
              HC=$(echo "$Q" | tail -n1)
              if [[ "$HC" != "200" ]]; then
                echo "    ⚠ 查询失败，HTTP $HC"
                FAILED_COUNT=$((FAILED_COUNT+1))
                break
              fi
              ST=$(echo "$BL" | jq -r '.snapshot.status')
              echo "    • 状态：$ST"
              if [[ "$ST" == "complete" ]]; then
                echo "    ✔ 已完成"
                break
              fi
              if [[ $ELAPSED -ge $TIMEOUT ]]; then
                echo "    ⏰ 超时（${TIMEOUT}s）"
                FAILED_COUNT=$((FAILED_COUNT+1))
                break
              fi
              echo "    等待 ${INTERVAL}s 后重试…"
              sleep $INTERVAL
              ELAPSED=$((ELAPSED+INTERVAL))
            done
          done
          echo "::endgroup::"

          #############################################################################
          # 最终报告
          #############################################################################
          echo "::group::操作总结"
          echo "✔ 已删除快照数：$DEL_COUNT"
          echo "✔ 实例总数：$INST_COUNT"
          echo "✔ 发起快照创建：$CREATED_COUNT"
          echo "❗ 失败次数：$FAILED_COUNT"
          echo "::endgroup::"

          # 如果有失败，标记 Job 失败
          if [[ $FAILED_COUNT -gt 0 ]]; then
            echo "::error::检测到 $FAILED_COUNT 个失败，动作结束状态：失败"
            exit 1
          fi

        shell: bash
