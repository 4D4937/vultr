name: Vultr Snapshot Backup

on:
  schedule:
    # 每6小时运行一次
    - cron: '0 */6 * * *'
  # 支持手动触发
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    env:
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
      TIMEOUT: 3600           # 监控超时时间（秒）
      SLEEP_INTERVAL: 30      # 轮询间隔（秒）
      DELETE_SLEEP: 1         # 删除快照时的等待（秒）
      CREATE_SLEEP: 2         # 创建快照时的等待（秒）
    steps:
      - name: 安装依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 执行 Vultr 快照备份
        shell: bash
        run: |
          set -euo pipefail
          echo "===== 开始执行 Vultr 快照备份 ====="

          # 一、获取并删除所有现有快照
          echo "Fetching existing snapshots..."
          resp=$(curl -sS -H "Authorization: Bearer $VULTR_API_KEY" https://api.vultr.com/v2/snapshots)
          mapfile -t snapshot_ids < <(echo "$resp" | jq -r '.snapshots[].id')
          total_snapshots=${#snapshot_ids[@]}
          echo "共发现 \$total_snapshots 个快照"
          delete_success=0; delete_fail=0
          for snap in "${snapshot_ids[@]}"; do
            echo "Deleting snapshot \$snap ..."
            code=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
              -H "Authorization: Bearer $VULTR_API_KEY" \
              https://api.vultr.com/v2/snapshots/\$snap)
            if [ "\$code" -eq 204 ]; then
              echo "  ✅ 已删除 \$snap"
              delete_success=\$((delete_success+1))
            else
              echo "::warning:: ❌ 删除 \$snap 失败 (HTTP \$code)"
              delete_fail=\$((delete_fail+1))
            fi
            sleep \$DELETE_SLEEP
          done
          echo "删除快照结果：成功 \$delete_success/\$total_snapshots，失败 \$delete_fail"
          echo

          # 二、获取所有实例并创建新快照
          echo "Fetching instances..."
          inst_json=$(curl -sS -H "Authorization: Bearer $VULTR_API_KEY" https://api.vultr.com/v2/instances)
          mapfile -t instance_ids < <(echo "\$inst_json" | jq -r '.instances[].id')
          total_instances=${#instance_ids[@]}
          echo "共发现 \$total_instances 个实例"
          created_success=0; created_fail=0
          > created_snapshot_ids.txt
          for id in "\${instance_ids[@]}"; do
            info=\$(echo "\$inst_json" | jq -r --arg ID "\$id" '.instances[] | select(.id==\$ID)')
            status=\$(echo "\$info" | jq -r '.status')
            power=\$(echo "\$info" | jq -r '.power_status')
            plan=\$(echo "\$info" | jq -r '.plan')
            region=\$(echo "\$info" | jq -r '.region')
            echo "Instance \$id: status=\$status, power=\$power, plan=\$plan, region=\$region"

            timestamp=\$(date -u +%Y-%m-%dT%H:%M:%SZ)
            desc="gh-action-backup-\$id-\$timestamp"
            echo "Creating snapshot for instance \$id ..."
            out=\$(curl -sS -w "\n%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $VULTR_API_KEY" \
              -d "{\"description\":\"\$desc\"}" \
              https://api.vultr.com/v2/instances/\$id/snapshots)
            body=\$(echo "\$out" | sed '\$d')
            code=\$(echo "\$out" | tail -n1)
            if [ "\$code" -eq 202 ]; then
              snap_id=\$(echo "\$body" | jq -r '.snapshot.id')
              echo "  ✅ Queued snapshot \$snap_id for instance \$id"
              echo "\$snap_id" >> created_snapshot_ids.txt
              created_success=\$((created_success+1))
            else
              echo "::error:: ❌ 创建实例 \$id 快照失败 (HTTP \$code)"
              echo "Response: \$body"
              created_fail=\$((created_fail+1))
            fi
            sleep \$CREATE_SLEEP
          done
          echo "创建快照结果：成功 \$created_success/\$total_instances，失败 \$created_fail"
          echo

          # 三、监控快照创建状态
          echo "Monitoring snapshot statuses..."
          total_new=\$(wc -l < created_snapshot_ids.txt)
          monitor_success=0; monitor_timeout=0; monitor_other=0
          while read -r snap; do
            echo ">> Snapshot \$snap"
            start=\$(date +%s)
            while true; do
              r=\$(curl -sS -H "Authorization: Bearer $VULTR_API_KEY" https://api.vultr.com/v2/snapshots/\$snap)
              st=\$(echo "\$r" | jq -r '.snapshot.status')
              echo "   status: \$st"
              if [ "\$st" = "complete" ]; then
                echo "   ✅ 完成"
                monitor_success=\$((monitor_success+1))
                break
              elif [ "\$st" = "pending" ]; then
                now=\$(date +%s)
                elapsed=\$((now - start))
                if [ \$elapsed -ge \$TIMEOUT ]; then
                  echo "::error::   ⏱ 超时 (\$elapsed 秒)"
                  monitor_timeout=\$((monitor_timeout+1))
                  break
                fi
                sleep \$SLEEP_INTERVAL
              else
                echo "::warning::   ❗️ 异常状态 \$st"
                monitor_other=\$((monitor_other+1))
                break
              fi
            done
          done < created_snapshot_ids.txt
          echo "监控结果：完成 \$monitor_success/\$total_new，超时 \$monitor_timeout，其他 \$monitor_other"
          echo

          # 四、操作总结
          echo "===== Vultr 备份总结 ====="
          echo "1）删除快照：成功 \$delete_success/\$total_snapshots，失败 \$delete_fail"
          echo "2）创建快照：成功 \$created_success/\$total_instances，失败 \$created_fail"
          echo "3）监控完成：\$monitor_success/\$total_new，超时 \$monitor_timeout，其他 \$monitor_other"
          echo "===== 备份流程结束 ====="
