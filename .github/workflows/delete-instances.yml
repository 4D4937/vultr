name: Vultr Automated Snapshot Management with Instance Cleanup

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_delete:
        description: '强制删除所有现有快照（true/false）'
        required: false
        default: 'true'
        type: boolean
      timeout_minutes:
        description: '快照创建超时时间（分钟）'
        required: false
        default: '30'
        type: string
      delete_instances:
        description: '快照成功后删除所有实例（true/false）'
        required: false
        default: 'true'
        type: boolean

env:
  VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
  VULTR_API_URL: "https://api.vultr.com/v2"

jobs:
  snapshot-management:
    name: Vultr Snapshot Management
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - name: 🔧 Checkout Repository
      uses: actions/checkout@v4

    - name: 📋 Setup Environment
      run: |
        echo "WORKFLOW_START_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
        echo "SNAPSHOT_TIMESTAMP=$(date '+%Y%m%d_%H%M%S')" >> $GITHUB_ENV
        echo "TIMEOUT_MINUTES=${{ github.event.inputs.timeout_minutes || '30' }}" >> $GITHUB_ENV
        echo "FORCE_DELETE=${{ github.event.inputs.force_delete || 'true' }}" >> $GITHUB_ENV
        echo "DELETE_INSTANCES=${{ github.event.inputs.delete_instances || 'true' }}" >> $GITHUB_ENV
        
        # 初始化状态文件
        echo "0" > /tmp/deleted_count
        echo "0" > /tmp/failed_delete_count
        echo "" > /tmp/created_snapshots
        echo "0" > /tmp/success_count
        echo "0" > /tmp/instances_deleted
        echo "0" > /tmp/instances_delete_failed

    - name: ✅ Validate API Configuration
      run: |
        if [ -z "$VULTR_API_KEY" ]; then
          echo "❌ 错误: VULTR_API_KEY 未设置"
          echo "请在仓库的 Settings > Secrets 中添加 VULTR_API_KEY"
          exit 1
        fi
        
        # 测试API连接
        echo "🔐 测试API连接..."
        test_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $VULTR_API_KEY" \
          "$VULTR_API_URL/account" -o /tmp/api_test.json)
        
        if [ "$test_response" != "200" ]; then
          echo "❌ API连接测试失败 (HTTP $test_response)"
          echo "请检查API密钥是否有效"
          exit 1
        fi
        
        echo "✅ API连接测试成功"
        echo "🌐 API端点: $VULTR_API_URL"
        echo "⏰ 工作流启动时间: $WORKFLOW_START_TIME"
        echo "🗑️ 删除实例设置: $DELETE_INSTANCES"

    - name: 🗑️ 第一步：删除现有快照
      run: |
        echo "=== 开始删除现有快照 ==="
        
        # 获取所有快照
        echo "📡 获取现有快照列表..."
        snapshots_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $VULTR_API_KEY" \
          "$VULTR_API_URL/snapshots" -o /tmp/snapshots.json)
        
        http_code=$(echo "$snapshots_response" | tail -c 4)
        if [ "$http_code" != "200" ]; then
          echo "❌ 获取快照列表失败 (HTTP $http_code)"
          exit 1
        fi
        
        snapshot_count=$(jq -r '.snapshots | length // 0' /tmp/snapshots.json)
        echo "📊 发现 $snapshot_count 个现有快照"
        
        if [ "$snapshot_count" -eq 0 ]; then
          echo "✅ 没有现有快照需要删除"
          echo "0" > /tmp/deleted_count
          echo "false" > /tmp/snapshots_deleted
        else
          deleted_count=0
          failed_count=0
          
          # 删除每个快照
          jq -r '.snapshots[]? | select(.id != null) | .id' /tmp/snapshots.json | while read -r snapshot_id; do
            if [ -n "$snapshot_id" ] && [ "$snapshot_id" != "null" ]; then
              snapshot_info=$(jq -r --arg id "$snapshot_id" '.snapshots[] | select(.id == $id)' /tmp/snapshots.json)
              snapshot_desc=$(echo "$snapshot_info" | jq -r '.description // "无描述"')
              created_date=$(echo "$snapshot_info" | jq -r '.date_created // "未知时间"')
              
              echo "🗑️ 删除快照: $snapshot_id ($snapshot_desc, 创建于: $created_date)"
              
              if [ "$FORCE_DELETE" == "true" ]; then
                delete_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $VULTR_API_KEY" \
                  -X DELETE "$VULTR_API_URL/snapshots/$snapshot_id" -o /tmp/delete_response.json)
                
                delete_http_code=$(echo "$delete_response" | tail -c 4)
                
                if [ "$delete_http_code" = "204" ] || [ "$delete_http_code" = "200" ] || [ "$delete_http_code" = "404" ]; then
                  echo "   ✅ 成功删除"
                  deleted_count=$((deleted_count + 1))
                else
                  echo "   ❌ 删除失败 (HTTP $delete_http_code)"
                  failed_count=$((failed_count + 1))
                fi
              else
                echo "   ⚠️ 跳过删除 (force_delete=false)"
              fi
              
              # 避免API限制
              sleep 2
            fi
          done
          
          echo "$deleted_count" > /tmp/deleted_count
          echo "$failed_count" > /tmp/failed_delete_count
          
          # 标记有快照被删除
          if [ "$deleted_count" -gt 0 ]; then
            echo "true" > /tmp/snapshots_deleted
          else
            echo "false" > /tmp/snapshots_deleted
          fi
        fi
        
        echo "=== 快照删除完成 ==="

    - name: ⏳ 等待清理完成
      run: |
        snapshots_deleted=$(cat /tmp/snapshots_deleted 2>/dev/null || echo "false")
        deleted_count=$(cat /tmp/deleted_count 2>/dev/null || echo "0")
        
        if [ "$snapshots_deleted" == "true" ] && [ "$deleted_count" -gt 0 ]; then
          echo "=== 等待快照删除完全完成 ==="
          echo "⏳ 已删除 $deleted_count 个快照，等待系统清理..."
          echo "💤 等待5分钟以确保删除操作完全完成..."
          
          # 5分钟倒计时显示
          total_seconds=300
          for i in $(seq $total_seconds -30 1); do
            minutes=$((i / 60))
            seconds=$((i % 60))
            printf "\r⏰ 剩余时间: %02d:%02d" $minutes $seconds
            sleep 30
          done
          printf "\r✅ 等待完成，系统已清理        \n"
        else
          echo "ℹ️ 没有删除快照，无需等待"
        fi

    - name: 📋 第二步：获取Vultr实例信息
      run: |
        echo "=== 获取Vultr实例信息 ==="
        
        # 获取所有实例
        instances_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $VULTR_API_KEY" \
          "$VULTR_API_URL/instances" -o /tmp/instances.json)
        
        http_code=$(echo "$instances_response" | tail -c 4)
        if [ "$http_code" != "200" ]; then
          echo "❌ 获取实例列表失败 (HTTP $http_code)"
          exit 1
        fi
        
        # 检查响应格式
        instance_count=$(jq -r '.instances | length // 0' /tmp/instances.json)
        echo "📊 发现 $instance_count 个实例"
        
        if [ "$instance_count" -eq 0 ]; then
          echo "⚠️ 没有发现任何实例"
          echo "0" > /tmp/instance_count
          echo "0" > /tmp/active_count
          echo "" > /tmp/active_instances
          echo "" > /tmp/all_instances
        else
          # 显示实例详情
          echo "📋 实例详细信息:"
          jq -r '.instances[]? | 
            "🖥️ 实例ID: \(.id // "未知")
             📍 标签: \(.label // "未命名")  
             🔋 状态: \(.status // "未知") | 电源: \(.power_status // "未知")
             💾 计划: \(.plan // "未知") | 区域: \(.region // "未知")
             🌐 主IP: \(.main_ip // "未分配")
             📅 创建时间: \(.date_created // "未知")
             =================="' /tmp/instances.json
          
          # 保存活跃实例ID和所有实例ID
          jq -r '[.instances[]? | select(.status == "active") | .id] | join(" ")' /tmp/instances.json > /tmp/active_instances
          jq -r '[.instances[]? | .id] | join(" ")' /tmp/instances.json > /tmp/all_instances
          active_count=$(jq -r '[.instances[]? | select(.status == "active")] | length' /tmp/instances.json)
          
          echo "🟢 活跃实例数量: $active_count"
          echo "$instance_count" > /tmp/instance_count
          echo "$active_count" > /tmp/active_count
        fi

    - name: 📸 第三步：创建新快照
      run: |
        echo "=== 开始创建新快照 ==="
        
        active_instances=$(cat /tmp/active_instances)
        active_count=$(cat /tmp/active_count)
        
        if [ "$active_count" -eq 0 ]; then
          echo "⚠️ 没有活跃实例，跳过快照创建"
          echo "" > /tmp/created_snapshots
          echo "0" > /tmp/success_count
        else
          created_snapshots=""
          success_count=0
          
          for instance_id in $active_instances; do
            if [ -n "$instance_id" ] && [ "$instance_id" != "null" ]; then
              echo "📸 为实例 $instance_id 创建快照..."
              
              # 生成快照描述
              snapshot_desc="AutoBackup_${SNAPSHOT_TIMESTAMP}_${instance_id}"
              
              # 创建快照
              create_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $VULTR_API_KEY" \
                -H "Content-Type: application/json" \
                -X POST "$VULTR_API_URL/snapshots" \
                -d "{
                  \"instance_id\": \"$instance_id\",
                  \"description\": \"$snapshot_desc\"
                }" -o /tmp/create_response.json)
              
              http_code=$(echo "$create_response" | tail -c 4)
              
              if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
                snapshot_id=$(jq -r '.snapshot.id // empty' /tmp/create_response.json)
                if [ -n "$snapshot_id" ] && [ "$snapshot_id" != "null" ] && [ "$snapshot_id" != "" ]; then
                  echo "   ✅ 快照创建请求成功 - ID: $snapshot_id"
                  created_snapshots="$created_snapshots $snapshot_id"
                  success_count=$((success_count + 1))
                else
                  echo "   ⚠️ 快照创建响应格式异常"
                  jq '.' /tmp/create_response.json || echo "无法解析响应"
                fi
              else
                echo "   ❌ 快照创建失败 (HTTP $http_code)"
                jq '.' /tmp/create_response.json 2>/dev/null || echo "响应: $(cat /tmp/create_response.json)"
              fi
              
              # 避免API限制
              sleep 3
            fi
          done
          
          echo "$created_snapshots" > /tmp/created_snapshots
          echo "$success_count" > /tmp/success_count
        fi
        
        echo "=== 快照创建请求完成 ==="

    - name: ⏳ 第四步：监控快照创建状态
      run: |
        echo "=== 监控快照创建状态 ==="
        
        created_snapshots=$(cat /tmp/created_snapshots)
        timeout_minutes="$TIMEOUT_MINUTES"
        
        if [ -z "$created_snapshots" ] || [ "$(echo $created_snapshots | wc -w)" -eq 0 ]; then
          echo "⚠️ 没有需要监控的快照"
          echo "0" > /tmp/final_completed
          echo "0" > /tmp/total_snapshots
          echo "false" > /tmp/all_snapshots_complete
        else
          echo "📊 监控快照: $created_snapshots"
          echo "⏱️ 超时时间: $timeout_minutes 分钟"
          
          start_time=$(date +%s)
          timeout_seconds=$((timeout_minutes * 60))
          completed_count=0
          total_snapshots=$(echo $created_snapshots | wc -w)
          
          while [ $completed_count -lt $total_snapshots ]; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            
            if [ $elapsed -gt $timeout_seconds ]; then
              echo "⏰ 监控超时 ($timeout_minutes 分钟)"
              break
            fi
            
            echo "🔄 检查快照状态... (已用时: $((elapsed/60))分钟)"
            completed_count=0
            
            for snapshot_id in $created_snapshots; do
              if [ -n "$snapshot_id" ] && [ "$snapshot_id" != "null" ]; then
                status_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $VULTR_API_KEY" \
                  "$VULTR_API_URL/snapshots/$snapshot_id" -o /tmp/status_response.json)
                
                status_http_code=$(echo "$status_response" | tail -c 4)
                
                if [ "$status_http_code" = "200" ]; then
                  status=$(jq -r '.snapshot.status // "unknown"' /tmp/status_response.json)
                  description=$(jq -r '.snapshot.description // "未知"' /tmp/status_response.json)
                  
                  case "$status" in
                    "complete")
                      echo "   ✅ $snapshot_id: 完成 ($description)"
                      completed_count=$((completed_count + 1))
                      ;;
                    "pending")
                      echo "   ⏳ $snapshot_id: 创建中 ($description)" 
                      ;;
                    *)
                      echo "   ❓ $snapshot_id: $status ($description)"
                      ;;
                  esac
                else
                  echo "   ❌ $snapshot_id: 状态检查失败 (HTTP $status_http_code)"
                fi
              fi
            done
            
            echo "📈 进度: $completed_count/$total_snapshots 完成"
            
            if [ $completed_count -lt $total_snapshots ]; then
              echo "💤 等待30秒后重新检查..."
              sleep 30
            fi
          done
          
          echo "$completed_count" > /tmp/final_completed  
          echo "$total_snapshots" > /tmp/total_snapshots
          
          # 检查是否所有快照都完成
          if [ "$completed_count" -eq "$total_snapshots" ] && [ "$total_snapshots" -gt 0 ]; then
            echo "true" > /tmp/all_snapshots_complete
            echo "🎉 所有快照创建完成！"
          else
            echo "false" > /tmp/all_snapshots_complete
            echo "⚠️ 并非所有快照都完成"
          fi
        fi
        
        echo "=== 快照监控完成 ==="

    - name: 🔥 第五步：删除所有实例
      run: |
        echo "=== 删除所有实例 ==="
        
        all_snapshots_complete=$(cat /tmp/all_snapshots_complete 2>/dev/null || echo "false")
        all_instances=$(cat /tmp/all_instances 2>/dev/null || echo "")
        total_snapshots=$(cat /tmp/total_snapshots 2>/dev/null || echo "0")
        
        echo "🔍 检查删除条件:"
        echo "   - 删除实例设置: $DELETE_INSTANCES"
        echo "   - 快照全部完成: $all_snapshots_complete"
        echo "   - 快照总数: $total_snapshots"
        echo "   - 实例列表: $all_instances"
        
        # 检查是否应该删除实例
        if [ "$DELETE_INSTANCES" != "true" ]; then
          echo "⚠️ 跳过删除实例 (delete_instances=false)"
          echo "0" > /tmp/instances_deleted
          echo "0" > /tmp/instances_delete_failed
        elif [ "$all_snapshots_complete" != "true" ]; then
          echo "⚠️ 跳过删除实例 (快照未全部完成)"
          echo "0" > /tmp/instances_deleted
          echo "0" > /tmp/instances_delete_failed
        elif [ "$total_snapshots" -eq 0 ]; then
          echo "⚠️ 跳过删除实例 (没有成功创建快照)"
          echo "0" > /tmp/instances_deleted
          echo "0" > /tmp/instances_delete_failed
        elif [ -z "$all_instances" ]; then
          echo "ℹ️ 没有实例需要删除"
          echo "0" > /tmp/instances_deleted
          echo "0" > /tmp/instances_delete_failed
        else
          echo "🔥 开始删除所有实例..."
          echo "⚠️  警告: 这将删除所有实例，操作不可逆！"
          
          deleted_instances=0
          failed_instances=0
          
          for instance_id in $all_instances; do
            if [ -n "$instance_id" ] && [ "$instance_id" != "null" ]; then
              # 获取实例信息
              instance_info=$(curl -s -H "Authorization: Bearer $VULTR_API_KEY" \
                "$VULTR_API_URL/instances/$instance_id")
              
              instance_label=$(echo "$instance_info" | jq -r '.instance.label // "未知"')
              instance_ip=$(echo "$instance_info" | jq -r '.instance.main_ip // "未分配"')
              instance_status=$(echo "$instance_info" | jq -r '.instance.status // "未知"')
              
              echo "🔥 删除实例: $instance_id"
              echo "   📍 标签: $instance_label"
              echo "   🌐 IP: $instance_ip" 
              echo "   🔋 状态: $instance_status"
              
              # 删除实例
              delete_response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $VULTR_API_KEY" \
                -X DELETE "$VULTR_API_URL/instances/$instance_id" -o /tmp/instance_delete_response.json)
              
              delete_http_code=$(echo "$delete_response" | tail -c 4)
              
              if [ "$delete_http_code" = "204" ] || [ "$delete_http_code" = "200" ] || [ "$delete_http_code" = "404" ]; then
                echo "   ✅ 实例删除成功"
                deleted_instances=$((deleted_instances + 1))
              else
                echo "   ❌ 实例删除失败 (HTTP $delete_http_code)"
                if [ -s /tmp/instance_delete_response.json ]; then
                  error_msg=$(jq -r '.error // "未知错误"' /tmp/instance_delete_response.json)
                  echo "   错误信息: $error_msg"
                fi
                failed_instances=$((failed_instances + 1))
              fi
              
              # 避免API限制
              sleep 3
            fi
          done
          
          echo "$deleted_instances" > /tmp/instances_deleted
          echo "$failed_instances" > /tmp/instances_delete_failed
          
          echo "📊 实例删除结果:"
          echo "   ✅ 成功删除: $deleted_instances 个"
          echo "   ❌ 删除失败: $failed_instances 个"
        fi
        
        echo "=== 实例删除完成 ==="

    - name: 📊 生成操作总结报告
      if: always()
      run: |
        echo "=== Vultr快照管理与实例清理总结报告 ==="
        echo "🕐 执行时间: $WORKFLOW_START_TIME"
        echo "⚙️ 触发方式: ${{ github.event_name }}"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "👤 手动触发参数:"
          echo "   - 强制删除快照: ${{ github.event.inputs.force_delete }}"
          echo "   - 超时时间: ${{ github.event.inputs.timeout_minutes }}分钟"
          echo "   - 删除实例: ${{ github.event.inputs.delete_instances }}"
        fi
        
        echo ""
        echo "📋 操作结果总览:"
        
        # 删除快照结果
        deleted_count=$(cat /tmp/deleted_count 2>/dev/null || echo "0")
        failed_delete_count=$(cat /tmp/failed_delete_count 2>/dev/null || echo "0")
        echo "🗑️ 旧快照删除: $deleted_count 个成功, $failed_delete_count 个失败"
        
        # 实例信息  
        total_instances=$(cat /tmp/instance_count 2>/dev/null || echo "0")
        active_instances=$(cat /tmp/active_count 2>/dev/null || echo "0") 
        echo "🖥️ 发现实例: $total_instances 个总计, $active_instances 个活跃"
        
        # 快照创建结果
        created_count=$(cat /tmp/success_count 2>/dev/null || echo "0")
        completed_count=$(cat /tmp/final_completed 2>/dev/null || echo "0") 
        total_snapshots=$(cat /tmp/total_snapshots 2>/dev/null || echo "0")
        echo "📸 快照创建: $created_count 个请求, $completed_count/$total_snapshots 个完成"
        
        # 实例删除结果
        instances_deleted=$(cat /tmp/instances_deleted 2>/dev/null || echo "0")
        instances_delete_failed=$(cat /tmp/instances_delete_failed 2>/dev/null || echo "0")
        echo "🔥 实例删除: $instances_deleted 个成功, $instances_delete_failed 个失败"
        
        # 等待时间信息
        snapshots_deleted=$(cat /tmp/snapshots_deleted 2>/dev/null || echo "false")
        if [ "$snapshots_deleted" == "true" ]; then
          echo "⏰ 删除等待: 5分钟清理时间"
        fi
        
        # 状态判断
        echo ""
        echo "🎯 最终状态评估:"
        
        all_snapshots_complete=$(cat /tmp/all_snapshots_complete 2>/dev/null || echo "false")
        
        if [ "$all_snapshots_complete" == "true" ] && [ "$instances_deleted" -gt 0 ]; then
          echo "🎉 完全成功: 所有快照完成，实例已清理"
          echo "💡 建议: 可以随时使用快照恢复实例"
        elif [ "$all_snapshots_complete" == "true" ] && [ "$DELETE_INSTANCES" != "true" ]; then
          echo "✅ 快照成功: 所有快照完成，实例保留"
          echo "💡 提示: 如需清理实例，请设置 delete_instances=true"
        elif [ "$all_snapshots_complete" == "true" ] && [ "$instances_deleted" -eq 0 ]; then
          echo "⚠️ 部分完成: 快照成功但实例删除失败"
          echo "💡 建议: 检查实例删除失败原因"
        elif [ "$completed_count" -gt 0 ]; then
          echo "⚠️ 部分成功: 部分快照完成"
          echo "💡 建议: 检查未完成的快照状态"
        elif [ "$total_snapshots" -gt 0 ]; then
          echo "❌ 任务失败: 快照创建失败"
          echo "💡 建议: 检查API权限和实例状态"
        else
          echo "💡 无操作: 没有需要处理的实例"
        fi
        
        # 安全提示
        if [ "$instances_deleted" -gt 0 ]; then
          echo ""
          echo "🔒 安全提醒:"
          echo "   ⚠️ $instances_deleted 个实例已被永久删除"
          echo "   📸 可使用创建的快照恢复实例"
          echo "   💰 删除实例将停止计费"
        fi
        
        exit 0
